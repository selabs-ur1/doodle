name: CI-CD-Master

on:
  push:
    branches: [ master ]

  workflow_dispatch:

jobs:

  CI-Front:
    runs-on: ubuntu-latest
    env:
      working-directory: ./front

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        working-directory: ${{env.working-directory}}
        run: npm install

      - name: Lint
        working-directory: ${{env.working-directory}}
        run: npm run lint

      - name: Run Unit Tests
        working-directory: ${{env.working-directory}}
        timeout-minutes: 5
        run: npm run ci:test

      - name: Build Angular app
        working-directory: ${{env.working-directory}}
        timeout-minutes: 5
        run: npm run build

      - name: Upload Angular artifact
        uses: actions/upload-artifact@v2
        with:
          name: angular-dist
          path: ./front/dist

  CI-Back:
    runs-on: ubuntu-latest
    env:
      working-directory: ./api

    steps:
      - uses: actions/checkout@v2

      - name: Setup Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '11'

      - name: Build artifact
        working-directory: ${{env.working-directory}}
        run: ./mvnw package -DskipTests

      - name: Upload Quarkus artifact
        uses: actions/upload-artifact@v2
        with:
          name: tlcdemoApp-1.0.0-SNAPSHOT-runner.jar
          path: ./api/target/tlcdemoApp-1.0.0-SNAPSHOT-runner.jar

  CI-Docker:
    needs: [ CI-Front, CI-Back ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download Quarkus artifact
        uses: actions/download-artifact@v2
        with:
          name: tlcdemoApp-1.0.0-SNAPSHOT-runner.jar
          path: ./api/target/tlcdemoApp-1.0.0-SNAPSHOT-runner.jar

      - name: Download Angular artifact
        uses: actions/download-artifact@v2
        with:
          name: angular-dist
          path: ./front/dist

      - name: Action For Semantic Release
        uses: cycjimmy/semantic-release-action@v2.6.0
        id: semantic
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./api
          push: true
          tags: ghcr.io/valentinlorand/doodle/back:${{ steps.semantic.outputs.new_release_version }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./front
          push: true
          tags: ghcr.io/valentinlorand/doodle/front:${{ steps.semantic.outputs.new_release_version }}

      - name: Analyse Front Docker Image
        uses: anchore/scan-action@v3
        id: scanFront
        with:
          image: "ghcr.io/valentinlorand/doodle/front:${{ steps.semantic.outputs.new_release_version }}"
          acs-report-enable: true

      - name: Display ACS Front Report
        run : cat ${{ steps.scanFront.outputs.sarif }}


      - name: Analyse Backend Docker Image
        uses: anchore/scan-action@v3
        id: scanBack
        with:
          image: "ghcr.io/valentinlorand/doodle/back:${{ steps.semantic.outputs.new_release_version }}"
          acs-report-enable: true
          fail-build: false

      - name: Display ACS Back Report
        run : cat ${{ steps.scanBack.outputs.sarif }}
